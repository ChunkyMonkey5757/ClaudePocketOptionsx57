"""
Enhanced RSI Strategy for PocketBotX57.
Implements advanced Relative Strength Index trading strategy with adaptive thresholds.
"""

import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional, Union
import logging

from src.utils.logger import get_logger
from src.utils.error_handler import DataError, async_exception_handler

# Get logger
logger = get_logger("rsi_strategy")

class RSIStrategy:
    """
    Enhanced Relative Strength Index (RSI) trading strategy.
    
    Features:
    - Dynamic overbought/oversold thresholds based on market conditions
    - RSI divergence detection
    - Multi-timeframe confirmation
    - Trend-adjusted signal generation
    """
    
    def __init__(self, params: Optional[Dict[str, Any]] = None):
        """
        Initialize the RSI strategy with parameters.
        
        Args:
            params: Dictionary with strategy parameters
        """
        # Default parameters
        self.name = "rsi_strategy"
        self.enabled = True
        self.weight = 0.15
        
        # RSI specific parameters
        self.period = 14
        self.overbought = 70
        self.oversold = 30
        self.dynamic_thresholds = True
        self.use_divergence = True
        
        # Signal strength factors
        self.signal_strength = {
            "extreme_oversold": 0.90,  # RSI < 20
            "oversold": 0.75,          # RSI < 30
            "approaching_oversold": 0.60,  # RSI < 40
            "neutral_low": 0.40,       # RSI 40-50
            "neutral_high": 0.40,      # RSI 50-60
            "approaching_overbought": 0.60,  # RSI > 60
            "overbought": 0.75,        # RSI > 70
            "extreme_overbought": 0.90  # RSI > 80
        }
        
        # Override defaults with provided parameters
        if params:
            for key, value in params.items():
                if key == "signal_strength" and isinstance(value, dict):
                    self.signal_strength.update(value)
                elif hasattr(self, key):
                    setattr(self, key, value)
        
        logger.info(f"RSI Strategy initialized with period={self.period}, overbought={self.overbought}, oversold={self.oversold}")
    
    def validate_data(self, data: pd.DataFrame, required_columns: List[str] = None) -> bool:
        """
        Validate that required data is present.
        
        Args:
            data: Market data DataFrame
            required_columns: List of required column names
            
        Returns:
            Boolean indicating if data is valid
        """
        if required_columns is None:
            required_columns = ["close"]
            
        if data is None or data.empty:
            logger.warning("Empty dataset provided")
            return False
            
        # Check for required columns
        missing_columns = [col for col in required_columns if col not in data.columns]
        if missing_columns:
            logger.warning(f"Missing required columns: {missing_columns}")
            return False
            
        return True
    
    def preprocess_data(self, data: pd.DataFrame) -> pd.DataFrame:
        """
        Preprocess market data for RSI calculation.
        
        Args:
            data: Market data DataFrame
            
        Returns:
            Preprocessed DataFrame
        """
        # Make a copy to avoid modifying original
        df = data.copy()
        
        # Ensure index is datetime if not already
        if not isinstance(df.index, pd.DatetimeIndex) and 'timestamp' in df.columns:
            df.set_index('timestamp', inplace=True)
        
        # Sort by index
        df = df.sort_index()
        
        # Fill any missing values
        df.fillna(method='ffill', inplace=True)
        
        return df
    
    def calculate_rsi(self, data: pd.DataFrame, period: int = None) -> pd.Series:
        """
        Calculate RSI values from market data.
        
        Args:
            data: Market data DataFrame
            period: RSI period (defaults to self.period)
            
        Returns:
            Series of RSI values
        """
        if period is None:
            period = self.period
            
        if not self.validate_data(data):
            raise DataError("Invalid data for RSI calculation")
            
        # Calculate price changes
        delta = data['close'].diff()
        
        # Separate gains and losses
        gain = delta.clip(lower=0)
        loss = -delta.clip(upper=0)
        
        # Calculate average gains and losses
        avg_gain = gain.rolling(window=period).mean()
        avg_loss = loss.rolling(window=period).mean()
        
        # First value is calculated differently
        first_avg_gain = gain.iloc[:period].mean()
        first_avg_loss = loss.iloc[:period].mean()
        
        # Use EMA to smooth subsequent values (more effective than SMA)
        smooth_avg_gain = pd.Series([first_avg_gain] + [np.nan] * (len(gain) - period))
        smooth_avg_loss = pd.Series([first_avg_loss] + [np.nan] * (len(loss) - period))
        
        for i in range(period, len(gain)):
            smooth_avg_gain.iloc[i - period + 1] = (
                smooth_avg_gain.iloc[i - period] * (period - 1) + gain.iloc[i]
            ) / period
            smooth_avg_loss.iloc[i - period + 1] = (
                smooth_avg_loss.iloc[i - period] * (period - 1) + loss.iloc[i]
            ) / period
        
        # Fill NaN values with rolling averages
        smooth_avg_gain = smooth_avg_gain.fillna(avg_gain)
        smooth_avg_loss = smooth_avg_loss.fillna(avg_loss)
        
        # Calculate RS value
        rs = smooth_avg_gain / smooth_avg_loss.replace(0, 1e-10)  # Avoid division by zero
        
        # Calculate RSI
        rsi = 100 - (100 / (1 + rs))
        
        return rsi
    
    def detect_divergence(self, data: pd.DataFrame, rsi: pd.Series) -> Dict[str, bool]:
        """
        Detect bullish and bearish divergences between price and RSI.
        
        Args:
            data: Market data DataFrame
            rsi: RSI values series
            
        Returns:
            Dictionary with divergence information
        """
        # Need at least 10 periods to detect divergence
        if len(data) < 10 or len(rsi) < 10:
            return {"bullish_divergence": False, "bearish_divergence": False}
            
        # Get recent prices and RSI values (last 10 periods)
        recent_close = data['close'].iloc[-10:].values
        recent_rsi = rsi.iloc[-10:].values
        
        # Simple divergence detection
        # Bullish: Price making lower lows but RSI making higher lows
        # Bearish: Price making higher highs but RSI making lower highs
        
        # Get min/max points
        price_min_idx = np.argmin(recent_close)
        price_max_idx = np.argmax(recent_close)
        rsi_min_idx = np.argmin(recent_rsi)
        rsi_max_idx = np.argmax(recent_rsi)
        
        # Check for bullish divergence (price low but RSI rising)
        bullish_divergence = (
            price_min_idx > 5 and  # Price minimum in latter half
            rsi_min_idx < 5 and    # RSI minimum in first half
            recent_close[-1] < recent_close[0] and  # Overall downtrend in price
            recent_rsi[-1] > recent_rsi[0]          # Overall uptrend in RSI
        )
        
        # Check for bearish divergence (price high but RSI falling)
        bearish_divergence = (
            price_max_idx > 5 and  # Price maximum in latter half
            rsi_max_idx < 5 and    # RSI maximum in first half
            recent_close[-1] > recent_close[0] and  # Overall uptrend in price
            recent_rsi[-1] < recent_rsi[0]          # Overall downtrend in RSI
        )
        
        return {
            "bullish_divergence": bullish_divergence,
            "bearish_divergence": bearish_divergence
        }
    
    def adjust_thresholds(self, data: pd.DataFrame) -> Tuple[float, float]:
        """
        Dynamically adjust RSI thresholds based on market conditions.
        
        Args:
            data: Market data DataFrame
            
        Returns:
            Tuple of (oversold_threshold, overbought_threshold)
        """
        if not self.dynamic_thresholds:
            return self.oversold, self.overbought
            
        try:
            # Measure volatility using ATR
            tr1 = data['high'] - data['low']
            tr2 = abs(data['high'] - data['close'].shift())
            tr3 = abs(data['low'] - data['close'].shift())
            tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = tr.rolling(window=14).mean().iloc[-1]
            
            # Normalize as percentage of price
            current_price = data['close'].iloc[-1]
            volatility = (atr / current_price) * 100
            
            # Adjust thresholds based on volatility
            # Higher volatility = wider thresholds
            volatility_factor = min(1.5, max(0.5, volatility / 1.0))
            
            # Calculate adjusted thresholds
            oversold_adjusted = max(20, min(40, self.oversold - (volatility_factor - 1) * 10))
            overbought_adjusted = min(80, max(60, self.overbought + (volatility_factor - 1) * 10))
            
            return oversold_adjusted, overbought_adjusted
            
        except Exception as e:
            logger.warning(f"Error adjusting thresholds: {str(e)}")
            return self.oversold, self.overbought
    
    def get_signal(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Calculate trading signal based on RSI strategy.
        
        Args:
            data: Market data DataFrame
            
        Returns:
            Signal dictionary with direction and confidence
        """
        try:
            if not self.validate_data(data):
                return {
                    "direction": "NEUTRAL",
                    "confidence": 0,
                    "details": {"error": "Invalid data"}
                }
                
            # Preprocess data
            df = self.preprocess_data(data)
            
            # Calculate RSI
            rsi = self.calculate_rsi(df)
            
            # Ensure we have valid RSI values
            if rsi.isna().all() or len(rsi) < self.period:
                return {
                    "direction": "NEUTRAL",
                    "confidence": 0,
                    "details": {"error": "Insufficient data for valid RSI"}
                }
                
            # Get current RSI value
            current_rsi = rsi.iloc[-1]
            
            # Adjust thresholds based on market conditions
            oversold, overbought = self.adjust_thresholds(df)
            
            # Detect divergences if enabled
            divergences = {}
            if self.use_divergence:
                divergences = self.detect_divergence(df, rsi)
            
            # Determine trend direction
            trend = "neutral"
            if len(df) >= 20:
                sma20 = df['close'].rolling(window=20).mean()
                if df['close'].iloc[-1] > sma20.iloc[-1]:
                    trend = "bullish"
                elif df['close'].iloc[-1] < sma20.iloc[-1]:
                    trend = "bearish"
            
            # Initialize signal
            signal = {
                "direction": "NEUTRAL",
                "confidence": 0,
                "details": {
                    "rsi": current_rsi,
                    "oversold_threshold": oversold,
                    "overbought_threshold": overbought,
                    "trend": trend,
                    "bullish_divergence": divergences.get("bullish_divergence", False),
                    "bearish_divergence": divergences.get("bearish_divergence", False)
                }
            }
            
            # Generate signal based on RSI value and divergences
            if current_rsi < oversold:
                # Oversold - potential BUY signal
                signal["direction"] = "BUY"
                
                # Determine confidence level
                if current_rsi < 20:
                    confidence = self.signal_strength["extreme_oversold"]
                else:
                    confidence = self.signal_strength["oversold"]
                
                # Increase confidence if bullish divergence is detected
                if divergences.get("bullish_divergence", False):
                    confidence = min(0.95, confidence + 0.15)
                
                # Reduce confidence if bearish trend
                if trend == "bearish":
                    confidence -= 0.1
                
                signal["confidence"] = min(confidence * 100, 95)  # Cap at 95%
                
            elif current_rsi > overbought:
                # Overbought - potential SELL signal
                signal["direction"] = "SELL"
                
                # Determine confidence level
                if current_rsi > 80:
                    confidence = self.signal_strength["extreme_overbought"]
                else:
                    confidence = self.signal_strength["overbought"]
                
                # Increase confidence if bearish divergence is detected
                if divergences.get("bearish_divergence", False):
                    confidence = min(0.95, confidence + 0.15)
                
                # Reduce confidence if bullish trend
                if trend == "bullish":
                    confidence -= 0.1
                
                signal["confidence"] = min(confidence * 100, 95)  # Cap at 95%
                
            elif current_rsi < 40:
                # Approaching oversold - weak BUY signal
                signal["direction"] = "BUY"
                confidence = self.signal_strength["approaching_oversold"]
                
                # Stronger signal if in bullish trend
                if trend == "bullish":
                    confidence += 0.1
                
                signal["confidence"] = confidence * 100
                
            elif current_rsi > 60:
                # Approaching overbought - weak SELL signal
                signal["direction"] = "SELL"
                confidence = self.signal_strength["approaching_overbought"]
                
                # Stronger signal if in bearish trend
                if trend == "bearish":
                    confidence += 0.1
                
                signal["confidence"] = confidence * 100
            
            return signal
            
        except Exception as e:
            logger.error(f"Error generating RSI signal: {str(e)}")
            return {
                "direction": "NEUTRAL",
                "confidence": 0,
                "details": {"error": str(e)}
            }